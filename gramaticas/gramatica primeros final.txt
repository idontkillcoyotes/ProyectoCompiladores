Clases = { ε , class }
Clase = { class }
Herencia = { extends, ε } 
Miembros = { ε , public, private, static, dynamic, idClase }
Ctor = { idClase }
ArgsFormales = { ( }
ListaArg = { ε , boolean, char, int, idClase, String }
ArgFormales = {  , , ε  }
FormaMetodo = { static, dynamic }
Visibilidad = { public, private }
TipoMetodo = { void, boolean, char, int, idClase, String }
Tipo = { boolean, char, int, idClase, String }
PosibleArreglo = {  [, ε  }
TipoPrimitivo = { boolean, char, int }
TipoReferencia = { idClase, String, boolean, char, int }
ListaDecVars = { idMetVar }
ListaDV = { ,, ε  }
Bloque = { { }
Sentencias = {  ε , ;, if, while, return, idMetVar, this, boolean, char, int, idClase, String, (, {  }
Sentencia = { ;, if, while, return, idMetVar, this, boolean, char, int, idClase, String, (, {  }
SentenciaElse = { else, ε  }
Expresiones = { ε , +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
SentenciaLlamada = { ( }
ExpOrR = {  ε , +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpAndR = { &&, ε  }
ExpIgR = {  ε , ==, != }
ExpCompR = {  ε , <, >, <=, >= }
ExpAdR = {  ε , +, - }
ExpMulR = {  ε , *, / }
OpIgual = {  ==, != }
OpComp = {  <, >, <=, >= }
OpAd = {  +, - }
OpUn = {  +, -, ! }
OpMul = { *, / }
Literal = { null, true, false, intLiteral, charLiteral, stringLiteral }
Primario = { idMetVar, (, idClase, this, new }
ExpresionParentizada = { ( }
Encadenado = { ε , ., [ }
AccesoThis = { this }
AccesoVar = { idMetVar }
LlamadaMetodo = { idMetVar }
LlamadaMetodoEstatico = { idClase }
LlamadaCtor = { new }
LlamadaCtorR = { idClase }
ArgsActuales = { ( }
ListaExpresiones = { ε , +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ListaExp = { ε , , }
AccesoArregloEncadenado = { [ }
Inicio = { class }
Atributo = { public, private }
Metodo = { static, dynamic }
Arg = { boolean, char, int, idClase, String }
Asignacion = { idMetVar, this }
ExpUn = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
Operando = { null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
LlamadaMetodoEncadenado = { ( }
Miembro = { public, private, static, dynamic, idClase }
MetodoVariable = { ε , ., [, ( }
Acceso = { (, ε , ., [ }
AccesoVarEncadenado = { ε , ., [ }
ExpMul = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpAd = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpComp = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpIg = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpAnd = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
ExpOr = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }
Expresion = { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new }