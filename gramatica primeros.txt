Inicio= { class }
Clases= { ε, class }
Clase= { class }
Herencia= { extends, ε }
Miembros= { ε, public, private, static, dynamic, idClase }
Miembro= { public, private, static, dynamic, idClase }
Atributo= { public, private }
Visibilidad= { public, private }
Ctor= { idClase }
Metodo= { static, dynamic }
FormaMetodo= { static, dynamic }
ArgsFormales= { ( }
ListaArg= { ε, boolean, char, int, idClase, String }
Arg= { boolean, char, int, idClase, String }
Tipo= { boolean, char, int, idClase, String }
TipoPrimitivo= { boolean, char, int }
TipoReferencia= { idClase, String, boolean, char, int }
ArgFormales= { ε, boolean, char, int, idClase, String }
TipoMetodo= { void, boolean, char, int, idClase, String }
ListaDecVars= { idMetVar }
ListaDV= { ,, ε }
Bloque= { { }
Sentencias= { ε, ;, if, while, return, idMetVar, this, boolean, char, int, idClase, String, (, { }
Sentencia= { ;, if, while, return, idMetVar, this, boolean, char, int, idClase, String, (, { }
SentenciaElse= { ε, else }
Asignacion= { idMetVar, this }
AccesoThis= { this }
AccesoVar= { idMetVar }
SentenciaLlamada= { ( }
Expresiones= { ε, +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
Expresion= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpOr= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpAnd= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpIg= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpComp= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpAd= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpMul= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ExpUn= { +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
OpUn= { +, -, ! }
Operando= { null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
Literal= { null, true, false, intLiteral, charLiteral, stringLiteral }
Primario= { (, idMetVar, idClase, this, new }
MetodoVariable= { ε, ., [, ( }
ExpresionParentizada= { ( }
LlamadaMetodo= { idMetVar }
LlamadaMetodoEstatico= { idClase }
LlamadaCtor= { new }
ExpOrR= { || , ε }
ExpAndR= { &&, ε }
ExpIgR= { ε, ==, != }
OpIgual= { ==, != }
ExpCompR= { ε, <, >, <=, >= }
ExpAdR= { ε, +, - }
OpAd= { +, - }
ExpMulR= { ε, *, / }
OpMul= { *, / }
OpComp= { <, >, <=, >= }
Encadenado= { ε, ., [ }
AccesoArregloEncadenado= { [ }
Acceso= { (, ε, ., [ }
LlamadaMetodoEncadenado= { ( }
AccesoVarEncadenado= { ε, ., [ }
LlamadaCtorR= { idClase, boolean, char, int }
ArgsActuales= { ( }
ListaExpresiones= { ε, +, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, (, idMetVar, idClase, this, new }
ListaExp= { ,, ε }