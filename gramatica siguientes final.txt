Inicio = { $ }
Clases = { $ }
Clase = { $ , class}
Herencia = { { }
Miembros = { } }
Miembro = { }, public, private, static, dynamic, idClase}
Atributo = { }, public, private, static, dynamic, idClase}
Metodo = { }, public, private, static, dynamic, idClase}	   
Ctor = { }, public, private, static, dynamic, idClase}
ArgsFormales = { { }
ListaArg = { ) }
ArgFormales = { ) }
Arg = { ), ,}
FormaMetodo = {void, boolean, char, int, idClase, String}
Visibilidad = {boolean, char, int, idClase, String}
TipoMetodo = {idMetVar}
Tipo = {idMetVar}
PosibleArreglo = {idMetVar}
TipoPrimitivo = {[}
TipoReferencia = {}
ListaDecVars = {;}
ListaDV = {;}
Bloque = { }, idClase, public, private, static, dynamic, ;, if, while, return, boolean, char, int, String, {, (, idMetVar, this, else}	     
Sentencias = {}}
Sentencia = { else, }, ;, if, while, return, boolean, char, int, idClase, String, {, (, idMetVar, this}
SentenciaElse = { else, }, ;, if, while, return, boolean, char, int, idClase, String, {, (, idMetVar, this}
Expresiones = {;}
Asignacion = {;}
SentenciaLlamada = {;}
Expresion = { ), ], ;, ,}
ExpOr = { ), ], ;, ,}
ExpOrR = { ), ], ;, ,}
ExpAnd = { ||, ), ], ;, ,}
ExpAndR = { ||, ), ], ;, ,}
ExpIg = { &&, ||, ), ], ;, ,}
ExpIgR = { &&, ||, ), ], ;, ,}
ExpComp = { ==, !=, &&, ||, ), ], ;, ,}
ExpCompR = { ==, !=, &&, ||, ), ], ;, ,}
ExpAd = { <, >, <=, >=, ==, !=, &&, ||, ), ], ;, ,}
ExpAdR = { <, >, <=, >=, ==, !=, &&, ||, ), ], ;, ,}
ExpMul = {+, -, <, <=, >, >=, ==, !=, &&, ||, ), ], ;, ,}
ExpMulR = {+, -, <, <=, >, >=, ==, !=, &&, ||, ), ], ;, ,}
ExpUn = {&&,||,),;,==,!=,<,>,<=,>=,+,-,*,/,],,}
OpIgual = {+, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new}
OpComp = {+, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new}
OpAd = {+, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new}
OpUn = {+, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new}
OpMul = {+, -, !, null, true, false, intLiteral, charLiteral, stringLiteral, idMetVar, (, idClase, this, new}
Operando = { *, /, +, -, <, <=, >, >=, ==, !=, &&, ||, ), ], ;, ,}	       
Literal = { *, /, +, -, <, <=, >, >=, ==, !=, &&, ||, ), ], ;, ,}
Primario = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
MetodoVariable = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
ExpresionParentizada = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
Encadenado = { =, ), *, /, +, -, <, >, <=, >=, ==, !=, &&, ||, ;, ], ,}
Acceso = { =, ), *, /, +, -, <, >, <=, >=, ==, !=, &&, ||, ;, ], ,}
AccesoThis = { =, ), *, /, +, -, <, >, <=, >=, ==, !=, &&, ||, ;, ], ,}
AccesoVar = {=}
LlamadaMetodo = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
LlamadaMetodoEstatico = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
LlamadaCtor = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
LlamadaCtorR = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, ], ,}
ArgsActuales = { ., ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, [, ], =, ,}
ListaExpresiones = {)}
ListaExp = {)}
LlamadaMetodoEncadenado = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, =, ], ,}
AccesoVarEncadenado = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, =, ], ,}
AccesoArregloEncadenado = { ), &&, ||, ;, ==, !=, <, >, <=, >=, +, -, *, /, =, ], ,}