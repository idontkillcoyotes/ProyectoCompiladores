.code 
push heap_init 
call 
push main ;cargo main 
call ;llamo a main 
halt ;termino

heap_init:
 ret 0

malloc:
loadfp ;Inicialización unidad 
loadsp 
storefp ;Finaliza inicialización del RA
LOADHL ;hl
DUP ;hl
PUSH 1 ;1
ADD ;hl+1
STORE 4 ;Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3 ;Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ;Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	;Retorna eliminando el parámetro






.code


Mainconst0:
loadfp			;inicio de ra (econst Main0)
loadsp			; (econst Main0)
storefp			;fin de ra (econst Main0)
rmem 0			;reservo espacio para var locales (econst Main0)
fmem 0			;libero espacio para var locales (econst Main0)
storefp			;retorno (econst Main0)
ret 1			;retorno con cant parametros + 1 (econst Main0)

main:
loadfp			;inicio de ra (emetodo main)
loadsp			;(emetodo main)
storefp			;fin de ra (emetodo main)
rmem 0			;reservo espacio para var locales (emetodo main)
push 999999			;apilo el this ficticio (nodollamest)
rmem 1			;reservo espacio para retorno (nodollamdir)
load 3			;cargo this (nodollamdir)
dup			;duplico this (nodollamdir)
loadref 0			;cargo vt (nodollamdir)
loadref -1			;cargo dir de metodo con el offset (nodollamdir)
call			;llamo (nodollamdir)
swap			;swapeo this con argumento (nodollamest)
push System_printI_1			;apilo direccion (nodollamest)
call			;hago llamada (nodollamest)
fmem 0			;libero espacio de var locales (emetodo main)
storefp			;retorno (emetodo main)
ret 1			;retorno (emetodo main)

Main_m1_0:
loadfp			;inicio de ra (emetodo m1)
loadsp			;(emetodo m1)
storefp			;fin de ra (emetodo m1)
rmem 1			;reservo espacio para var locales (emetodo m1)
push 1			;pusheo literal booleano
bf endif_1Main_m1_0			;si condicion false salto fin(nodoif)
push 1			;pusheo literal entero
store 4 ;guardo el resultado (nodoreturn)
fmem 1 ;libero espacio de vars locales (nodoreturn)
storefp ;retorno (nodoreturn)
ret 1 ;retorno (nodoreturn)
endif_1Main_m1_0: 
push 3			;pusheo literal entero
store 0			;guardo var local o param (nodovar)
push 3			;pusheo literal entero
store 4 ;guardo el resultado (nodoreturn)
fmem 1 ;libero espacio de vars locales (nodoreturn)
storefp ;retorno (nodoreturn)
ret 1 ;retorno (nodoreturn)


System_read_0:
loadfp
loadsp
storefp
read
store 4
storefp
ret 1

System_readI_0:
loadfp
loadsp
storefp
read
push 48
sub
store 4
storefp
ret 1

System_println_0:
loadfp
loadsp
storefp
prnln
storefp
ret 1

System_printI_1:
loadfp
loadsp
storefp
load 4
iprint
storefp
ret 2

System_printB_1:
loadfp
loadsp
storefp
load 4
bprint
storefp
ret 2

System_printC_1:
loadfp
loadsp
storefp
load 4
cprint
storefp
ret 2

System_printS_1:
loadfp
loadsp
storefp
load 4
sprint
storefp
ret 2

System_printIln_1:
loadfp
loadsp
storefp
load 4
iprint
prnln
storefp
ret 2

System_printBln_1:
loadfp
loadsp
storefp
load 4
bprint
prnln
storefp
ret 2

System_printCln_1:
loadfp
loadsp
storefp
load 4
cprint
prnln
storefp
ret 2

System_printSln_1:
loadfp
loadsp
storefp
load 4
sprint
prnln
storefp
ret 2



