.code
	rmem 1 			;guardo espacio para retorno
	push sys_read 	;cargo direccion de metodo
	call			;llamo metodo
	push 100		;cargo num
	push sys_printIln ;cargo direccion metodo
	call			;llamo metodo
	halt			;termino
	
	
	
	
sys_read:
	loadfp
	loadsp
	storefp
	read
	store 3 ;guardo en 3 porque no hay this
	storefp
	ret 0
sys_printiln:
	loadfp
	loadsp
	storefp
	load 2 ;cargo 3 (primer parametro) porque no hay this
	iprint
	prnln
	storefp
	ret 1
sys_printB:
	loadfp
	loadsp
	storefp
	load 3
	bprint
	storefp
	ret 1	
sys_printC:
	loadfp
	loadsp
	storefp
	load 3
	cprint
	storefp
	ret 1
sys_printI:
	loadfp
	loadsp
	storefp
	load 3
	iprint
	storefp
	ret 1
sys_printS:
	loadfp
	loadsp
	storefp
	load 3
	sprint
	storefp
	ret 1
sys_printBln:
	loadfp
	loadsp
	storefp
	load 3
	bprint
	prnln
	storefp
	ret 1
sys_printCln:
	loadfp
	loadsp
	storefp
	load 3
	cprint
	prnln
	storefp
	ret 1
sys_printSln:
	loadfp
	loadsp
	storefp
	load 3
	sprint
	prnln
	storefp
	ret 1
	
simple_heap_init:
	RET 0	; Retorna inmediatamente

simple_malloc:
	LOADFP	; Inicialización unidad	
	LOADSP
	STOREFP ; Finaliza inicialización del RA
	LOADHL	; hl
	DUP		; hl
	PUSH 1	; 1
	ADD		; hl+1
	STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
 	LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
	ADD
	STOREHL ; Mueve el heap limit (hl). Expande el heap
	STOREFP
	RET 1	; Retorna eliminando el parámetro